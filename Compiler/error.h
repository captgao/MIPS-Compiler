#pragma once
using namespace std;
enum ERROR {
	E_NO_CONST_TYPE,
	E_CONSTDEF_NOT_END,
	E_CONST_INT_ASSIGN_TYPE,
	E_CONST_CHAR_ASSIGN_TYPE,
	E_CONST_NOT_ASSIGNSY,
	E_EXPECTED_IDEN,
	E_VAR_DEF_NOT_END,
	E_PARAMETER_NOT_END,
	E_INVALID_PARAMETER_TYPE,
	E_VAR_DEF_IN_FUNC_AREA,
	E_EXPECTED_LBRACE,
	E_EXPECTED_RBRACKSY,
	E_EXPECTED_INTEGER,
	E_EXPECTED_ALL_INTEGER,
	E_EXPECTED_UNSIGNED,
	E_UNEXPECTED_FILE_ENDED,
	E_IF_CONDITION_NOT_END,
	E_IF_NO_CONDITION,
	E_EXPECTED_EXPRESSION,
	E_EXPECTED_RELATION,
	E_EXPECTED_TERM,
	E_EXPECTED_FACTOR,
	E_EXPECTED_RPAR,
	E_INVALID_VALUE_PARAMETERS,
	E_WHILE_NO_CONDITION,
	E_WHILE_CONDITION_NOT_END,
	E_EXPECTED_LPAR,
	E_SWITCH_EXPRESSION_NOT_END,
	E_SWITCH_NO_LPAR,
	E_SWITCH_NO_EXPRESSION,
	E_SWITCH_NO_LBRACE,
	E_INVALID_CASE_LIST,
	E_CASE_EXPECTED_COLON,
	E_CASE_STATEMENT,
	E_EXPECTED_ALLSTATEMENTS,
	E_EXPECTED_RBRACE,
	E_EXPECTED_SEMI,
	E_UNEXPECPTED_SCANF_PARA,
	E_PRINTF_NOT_END,
	E_UNEXPECTED_PRINTF_PARA,
	E_RETURN_NOT_END,
	E_EXPECTED_ASSIGNSY,
	E_UNEXPECTED_AFTER_IDEN,
	E_INVALID_CASELIST,
	E_VOIDFUNC_INVALID_IDEN,
	E_FUNC_PARAMETER_LIST,
	E_MAIN_EXPECTED_RPAR,
	E_CASE_NO_CONST,
	E_INVALID_STATEMENT,
	E_LEXICAL_SINGLEQUOTE_MISMATCH,
	E_LEXICAL_INVALID,
	E_LEXICAL_CHAR_NOT_END,
	E_LEXICAL_MULTI_CHAR,
	E_LEXCIAL_STRING_NOT_END,
	E_UNDEFINED_IDEN
};
enum SEMANTIC_ERROR {
	E_DUPLICATE_DECLARATION, E_EXPECTED_VAR, E_IDEN_NOT_FUNC, E_IDEN_NOT_ARRAY, E_FUNCTION_PARA_MISMATCH, E_IDEN_FUNC_OR_ARRAY,
	E_TYPE_MISMATCH, E_CONDITION_NOT_INT
};
enum WARNING {
	W_TYPE_CAST, E_FUNC_NO_RETURN
};

void error(enum ERROR e);

void semantic_error(enum SEMANTIC_ERROR e);

void warning(enum WARNING w);

void critical(enum ERROR e);